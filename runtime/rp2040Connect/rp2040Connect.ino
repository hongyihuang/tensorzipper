const size_t DATA_SIZE = sizeof(data)/sizeof(uint8_t);

const uint8_t data_zip[] = {
  0x0, 0x4, 0x60, 0x6c, 0x4a, 0xf6, 0xd4, 0x37, 0xd2, 0xdd, 0xf4, 0x45, 0x67, 0x46, 0x65, 0xed, 0x99, 0xf6, 0xea, 0xc6, 0x9, 0xfe, 0x41, 0xd8, 0xef, 0xc9, 0x9, 0xf7, 0xdc, 0xb8, 0xed, 0xf7, 0xfe, 0x5d, 0x2c, 0xf3, 0xdb, 0xc6, 0x3, 0x2, 0x4c, 0xd3, 0xd9, 0xd7, 0xaa, 0xf6, 0xe2, 0xd9, 0xee, 0xca, 0x76, 0xd5, 0x32, 0xc8, 0x99, 0xea, 0x39, 0xcd, 0xb9, 0xe8, 0xe2, 0xe0, 0x9a, 0xfd, 0xce, 0x16, 0xe5, 0xc3, 0x15, 0xe8, 0x45, 0xe3, 0x6d, 0xd7, 0x91, 0x9f, 0xe1, 0xe4, 0xe5, 0x4f, 0xdb, 0x76, 0xc1, 0x27, 0xe0, 0x66, 0xf5, 0x43, 0x9b, 0xce, 0x97, 0xd3, 0x2d, 0xf9, 0xca, 0x92, 0xd7, 0x34, 0xcc, 0x69, 0x9a, 0xf9, 0xf4, 0x30, 0x59, 0xd3, 0xf2, 0x7a, 0xcb, 0xd0, 0xff, 0xea, 0xca, 0xb3, 0xf1, 0xe4, 0xcd, 0x6, 0x6, 0x2, 0x72, 0x6c, 0xd0, 0x54, 0xf0, 0xe6, 0xef, 0x3d, 0xeb, 0x25, 0xf7, 0xe4, 0x1e, 0xaf, 0xf7, 0xbf, 0xf4, 0xd7, 0xc7, 0xea, 0xce, 0x54, 0xee, 0xf0, 0xf9, 0x53, 0x6e, 0x51, 0xb1, 0x47, 0x2b, 0xcd, 0x4d, 0xd6, 0x10, 0xd0, 0x3e, 0x6b, 0xd4, 0x3d, 0xf7, 0xe4, 0xe7, 0x5e, 0x5e, 0xcd, 0x5a, 0x2b, 0xd7, 0xb3, 0xfa, 0xc4, 0x37, 0xfa, 0xd9, 0xd7, 0xca, 0x86, 0xc8, 0xeb, 0xeb, 0xde, 0xf3, 0x72, 0xf2, 0x13, 0x46, 0xfe, 0xe2, 0xc4, 0xf8, 0xc6, 0xa6, 0xf3, 0xe3, 0xef, 0xe2, 0xa8, 0xdd, 0x4c, 0x6, 0x8, 0x8, 0x46, 0x8b, 0xc5, 0xec, 0x6b, 0xee, 0xe6, 0xcc, 0x98, 0xf5, 0xd6, 0x42, 0xe2, 0x5b, 0xe1, 0x1c, 0xdd, 0xe5, 0x1, 0xef, 0xe2, 0xe9, 0xc3, 0x6f, 0xe0, 0xe9, 0xe3, 0x33, 0x10, 0x7f, 0xb4, 0x51, 0x9a, 0x64, 0x2, 0x79, 0xa6, 0xe0, 0xed, 0xe3, 0xb2, 0xe9, 0xfb, 0xee, 0xdc, 0xd5, 0xd5, 0xed, 0xff, 0xf6, 0xdb, 0xb6, 0xfd, 0xff, 0xe3, 0x98, 0xc9, 0xe7, 0xc7, 0x16, 0xf8, 0xe4, 0xa6, 0xfe, 0xc3, 0x65, 0xf1, 0xfd, 0xcf, 0x62, 0xdb, 0xff, 0xe7, 0xca, 0xba, 0xde, 0xce, 0x6c, 0x73, 0x51, 0xf7, 0xe3, 0xca, 0x99, 0xd6, 0xe2, 0xe9, 0x89, 0xe9, 0xdb, 0x9d, 0xfd, 0xf9, 0xc4, 0x2e, 0xe9, 0xd8, 0xe4, 0x6d, 0xd3, 0x88, 0xec, 0x6b, 0xe3, 0x32, 0xc2, 0xef, 0xdd, 0xda, 0xe1, 0x6e, 0xdc, 0xef, 0xfd, 0xcc, 0x16, 0x6, 0x2, 0x96, 0xd0, 0x71, 0xf3, 0xd8, 0xec, 0xc5, 0xad, 0x93, 0xd4, 0xa5, 0xee, 0xa6, 0xc9, 0x9b, 0xc6, 0xdc, 0xd9, 0x58, 0xf7, 0x77, 0x23, 0xc7, 0x50, 0xdd, 0xd7, 0x6f, 0xda, 0xd4, 0x43, 0xa2, 0xe3, 0xde, 0x8f, 0xd9, 0xc2, 0x2, 0xc1, 0x9d, 0xc6, 0xc0, 0x4f, 0xd3, 0xb8, 0xee, 0xa5, 0x46, 0xc7, 0x43, 0xd7, 0xb8, 0xec, 0x13, 0x67, 0x26, 0xda, 0xa0, 0xed, 0xea, 0xf7, 0xc5, 0x1f, 0xdf, 0xe6, 0xe8, 0x2f, 0xe0, 0x54, 0xeb, 0x2f, 0x8a, 0x79, 0xbb, 0xd8, 0xd2, 0x12, 0xe6, 0xfc, 0xf9, 0xc4, 0x3e, 0xf7, 0xd6, 0xca, 0xa9, 0xfd, 0x2a, 0x59, 0xe2, 0x94, 0xfd, 0xfe, 0xe2, 0x39, 0xab, 0xfb, 0xfd, 0xfc, 0xd0, 0x35, 0xed, 0xfd, 0xd5, 0x95, 0xfc, 0xa, 0xfa, 0xf9, 0xd7, 0x99, 0xd5, 0x7, 0x6e, 0xea, 0xc4, 0x93, 0xfc, 0xc2, 0x3a, 0xcf, 0xe5, 0xe6, 0x33, 0x70, 0x4d, 0x1d, 0x50, 0x2e, 0x68, 0xc6, 0xe3, 0xd6, 0xeb, 0xbb, 0xe4, 0xe0, 0xf4, 0xe7, 0xbf, 0xcd, 0xcc, 0xed, 0xf2, 0xf0, 0xca, 0x4d, 0xf7, 0xe0, 0x9e, 0xe8, 0x6, 0x5, 0x80, 0x9b, 0xec, 0xfa, 0xe0, 0xc4, 0xab, 0xe2, 0xd6, 0xe8, 0xee, 0x8d, 0xfc, 0xd5, 0x21, 0xfe, 0x50, 0xe3, 0xfc, 0xe2, 0xb, 0xfa, 0xef, 0x62, 0xc2, 0xd6, 0xfd, 0x87, 0xb, 0xf3, 0xc1, 0xff, 0xe9, 0xe7, 0xf7, 0xcc, 0x6d, 0xf3, 0xf7, 0xe9, 0xcd, 0x6, 0x6, 0xf, 0xd9, 0xdd, 0x74, 0x66, 0xf5, 0xf0, 0xe9, 0xe6, 0x3b, 0xd1, 0xe2, 0x2, 0xd1, 0xe, 0xfc, 0x98, 0xd0, 0xdc, 0xeb, 0xe8, 0xa9, 0xf9, 0xc2, 0xa7, 0xf3, 0xd5, 0x9b, 0xe9, 0xc9, 0xc6, 0xb4, 0xe6, 0xe, 0xdc, 0x82, 0xf1, 0xf4, 0xd9, 0x46, 0xdb, 0x7a, 0x6, 0x8, 0x7, 0xe5, 0xce, 0xe2, 0x1, 0xfc, 0xce, 0xcf, 0xdc, 0x2a, 0xff, 0xdb, 0xe9, 0xc9, 0xae, 0xf4, 0x1a, 0x5c, 0x9, 0xdb, 0xe7, 0xfb, 0x94, 0xd4, 0xe9, 0xfa, 0xfc, 0x75, 0xc1, 0x7f, 0x2e, 0x77, 0xd, 0xf1, 0xbe, 0xe4, 0x58, 0x7, 0x4a, 0xd9, 0xce, 0x19, 0xed, 0xf9, 0xe9, 0xca, 0x6c, 0xf3, 0xe1, 0xd6, 0xff, 0xd9, 0xf4, 0x79, 0xfb, 0xe4, 0x24, 0xde, 0xf8, 0xd7, 0xa2, 0xee, 0xe8, 0x15, 0xf0, 0xf8, 0xd1, 0x5a, 0xd2, 0xf2, 0x39, 0xd2, 0x4c, 0xd3, 0x13, 0xfa, 0xf9, 0xcf, 0x93, 0xde, 0xcf, 0x2, 0x80, 0x60, 0xd0, 0x5e, 0xff, 0xec, 0xc1, 0xff, 0xfb, 0x79, 0xe1, 0xfb, 0xdf, 0x95, 0xfc, 0xdf, 0x5f, 0xff, 0xe0, 0x91, 0xfb, 0xe1, 0x94, 0xfd, 0xe2, 0x9b, 0xfd, 0xfe, 0xfb, 0x20, 0xfb, 0x7a, 0x2, 0x7f, 0x9a, 0xff, 0xf6, 0x11, 0xed, 0xe4, 0xc6, 0x83, 0xe9, 0x27, 0x22, 0xed, 0xea, 0xcf, 0xf, 0xee, 0xf0, 0xfe, 0xda, 0x6f, 0xf8, 0x87, 0xc6, 0x77, 0xdd, 0x8e, 0xd7, 0x30, 0x62, 0xda, 0xf0, 0xe2, 0xd4, 0xdb, 0x20, 0xf7, 0xff, 0xe5, 0xc3, 0x70, 0x5, 0x3b, 0xae, 0xeb, 0xf1, 0xc4, 0x20, 0xf2, 0xfa, 0xf9, 0x51, 0x51, 0xe8, 0xd8, 0xc8, 0xdc, 0x66, 0xf4, 0xbf, 0x47, 0xf3, 0xb1, 0xe8, 0xd1, 0x8c, 0xcd, 0x17, 0xe4, 0xd5, 0xa9, 0xd5, 0x2c, 0xe5, 0x3c, 0x96, 0xfc, 0xc6, 0x4b, 0xc2, 0x49, 0xeb, 0xf5, 0xd0, 0xdb, 0xfb, 0x84, 0xe4, 0xf6, 0xfd, 0xd8, 0x16, 0x5, 0x41, 0xa8, 0xe5, 0xf2, 0xf8, 0xca, 0xa0, 0xf6, 0xea, 0xdb, 0x8c, 0xe2, 0x68, 0xf2, 0xed, 0xe9, 0xcb, 0x7b, 0xe7, 0xef, 0xf9, 0xce, 0x98, 0xe8, 0x2a, 0xf8, 0xc4, 0x8f, 0x5a, 0xca, 0xbb, 0xf4, 0xe5, 0xd3, 0xdb, 0xf9, 0x89, 0xeb, 0xf7, 0xfe, 0xd7, 0x42, 0x6, 0x2, 0x72, 0x6b, 0xd6, 0x96, 0xf7, 0xe6, 0xf9, 0x49, 0xe9, 0x4b, 0xe3, 0xb6, 0xf2, 0xce, 0xe4, 0x55, 0xf5, 0xfa, 0xca, 0x35, 0xe6, 0x2a, 0xf4, 0x1e, 0x3f, 0x50, 0xba, 0xc4, 0x4e, 0xd7, 0x2, 0xc4, 0x16, 0x7, 0x5b, 0xc7, 0xd7, 0x10, 0xfa, 0xf7, 0x93, 0x2f, 0x34, 0xef, 0x84, 0xce, 0xa8, 0x9e, 0x59, 0x98, 0xf0, 0x93, 0xe2, 0x19, 0xd6, 0x5a, 0xf5, 0x83, 0xde, 0xbc, 0x4c, 0x2, 0x8a, 0xc8, 0x3f, 0xdf, 0x10, 0x83, 0xf9, 0xdc, 0xa6, 0xef, 0xc, 0xfc, 0xcf, 0x8a, 0x83, 0xfb, 0xe0, 0xde, 0xfd, 0xd8, 0x60, 0xf5, 0xff, 0xf7, 0xd3, 0x5b, 0xfb, 0xcd, 0x59, 0xfa, 0x26, 0xf2, 0x29, 0xea, 0x56, 0xd2, 0x6f, 0x3f, 0x21, 0xe3, 0x51, 0xf3, 0x58, 0xd1, 0x7, 0xd3, 0xc, 0xe3, 0x3d, 0xd9, 0x5c, 0x5b, 0x5f, 0x16, 0xc8, 0x7, 0xf7, 0xd4, 0xb1, 0xd6, 0xa, 0x6, 0x7, 0x56, 0xe7, 0xf1, 0xd1, 0x5a, 0xf3, 0xd7, 0xc4, 0x43, 0xf0, 0x73, 0xf, 0xd6, 0x10, 0xd1, 0x74, 0xd7, 0x5a, 0xcd, 0xb6, 0x4, 0x9d, 0xf0, 0xf4, 0x4c, 0xc7, 0xd2, 0xe9, 0xf5, 0xc4, 0x78, 0xde, 0xed, 0xec, 0xe6, 0xcb, 0x6, 0x2, 0x6d, 0x34, 0xf1, 0xff, 0xfa, 0xc7, 0xbe, 0xcd, 0x1f, 0xdd, 0x59, 0xf6, 0x93, 0x1f, 0xff, 0xf7, 0xc5, 0x71, 0xd5, 0xe6, 0xeb, 0x3e, 0xd6, 0x31, 0x74, 0xe7, 0x63, 0xff, 0xe4, 0xd9, 0xf8, 0x11, 0xfb, 0xfb, 0xfe, 0x3f, 0x15, 0xf3, 0xe9, 0xd9, 0x2, 0x79, 0xa5, 0xed, 0xcd, 0xc4, 0x41, 0xef, 0xe8, 0xdd, 0x51, 0xfb, 0xc2, 0xc8, 0x67, 0xe9, 0x93, 0xe4, 0x6, 0xdf, 0x90, 0x49, 0xda, 0x18, 0xc9, 0x9d, 0xd5, 0xda, 0x88, 0xe5, 0x4b, 0xcb, 0x28, 0xda, 0x4a, 0xe8, 0x1b, 0xdf, 0xf0, 0xe4, 0x57, 0x37, 0xb1, 0x4c, 0x38, 0x36, 0x8, 0xe3, 0xbb, 0xe1, 0x3d, 0xd9, 0x97, 0xe1, 0xbf, 0xe8, 0x9b, 0xe0, 0x20, 0xf1, 0x31, 0xe4, 0xcb, 0x55, 0xf2, 0xda, 0xcd, 0xf2, 0xd5, 0x4c, 0xfe, 0xfe, 0xf2, 0x6, 0xde, 0xde, 0xd3, 0x6, 0x5, 0x81, 0x20, 0xf1, 0xfb, 0xee, 0xd4, 0xbe, 0xf9, 0xd2, 0xd6, 0xea, 0x5a, 0xde, 0x74, 0xff, 0x85, 0xfc, 0x1, 0xf4, 0x23, 0x72, 0xc5, 0x33, 0xea, 0xfa, 0xcd, 0x67, 0xfe, 0xd9, 0x13, 0xda, 0xce, 0x7c, 0xef, 0xfa, 0xeb, 0xf7, 0xe3, 0xd7, 0xc6, 0xe9, 0xea, 0xe1, 0xd7, 0x7a, 0x6, 0x2, 0x7d, 0x85, 0xd7, 0xc3, 0xd4, 0x72, 0xe8, 0xfd, 0xfd, 0xce, 0x14, 0x78, 0xf1, 0xec, 0xe, 0xe8, 0xcf, 0x83, 0xf2, 0x54, 0xee, 0x94, 0xfa, 0xf3, 0xf7, 0xc3, 0x70, 0xe1, 0xdc, 0xd4, 0x75, 0xe6, 0x74, 0xf4, 0xc4, 0x2, 0xcf, 0x9d, 0xcd, 0x2, 0x76, 0x7b, 0xf9, 0xc8, 0xbe, 0xf8, 0xd6, 0xff, 0xe4, 0x41, 0xde, 0x26, 0xfc, 0x54, 0xfd, 0xd2, 0x9c, 0xed, 0x78, 0xe3, 0xc2, 0xfe, 0xda, 0x40, 0xf7, 0xfc, 0xf1, 0x58, 0xf3, 0xe6, 0xc, 0xd5, 0x9d, 0xcd, 0x19, 0xf6, 0xc6, 0x6, 0xd, 0x5b, 0x53, 0x5d, 0x9c, 0xcf, 0xd1, 0x8b, 0xb5, 0xda, 0x7d, 0x2c, 0xe4, 0x80, 0xda, 0xca, 0xec, 0xcf, 0xa4, 0xe7, 0xf7, 0xff, 0xdd, 0xaa, 0xf4, 0xa5, 0x4e, 0x62, 0x6
};
const uint8_t data_zip_dist[] = {0xc2, 0x5, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x3, 0x4, 0x4, 0x5, 0x4, 0x5};
const size_t DATA_ZIP_SIZE = sizeof(data_zip)/sizeof(uint8_t);

void printByte(uint8_t x) {
  if (x < 4) {
    Serial.print("  ");
  } else if (x < 8) {
    Serial.print("..");
  } else if (x < 12) {
    Serial.print("**");
  } else if (x < 16) {
    Serial.print("%%");
  } else {
    Serial.print("??");
  }
}

void printMNIST(const uint8_t* arr) {
  for (size_t i = 0; i < DATA_SIZE; i++) {
    uint8_t x = *(arr+i);
    printByte(x);
    if ((i % 14) == 0) {
      Serial.println();
    }
  }
}

void printZip(const uint8_t* bitstream, const uint8_t* dist, const size_t size) {
  uint8_t cumulative[16], inv_f[256];

  cumulative[0] = 0;
  for (int k = 1; k < 16; k++) {
    cumulative[k] = cumulative[k-1] + dist[k-1];
  }
  
  int y = 0;
  for (int x = 0; x < 256; x++) {
    if ((x < cumulative[y]) || (y >= 16)) {
      inv_f[x] = y-1;
    } else {
      y += 1;
      inv_f[x] = y-1;
    }
  }
  
  uint32_t state = (bitstream[0] << 16) + (bitstream[1] << 8) + bitstream[2];
  uint8_t symbol, slot;
  // i: counter of compressed data block
  // j: counter of decompressed data block
  size_t i = 0;
  size_t j = 3;
  
  while ((j < size) || (state != 256)) {
    // perform decoding
    slot = state & 0xFF;
    symbol = inv_f[slot];
    state = (state >> 8) * dist[symbol] + slot - cumulative[symbol];
    
    // remap state
    while ((j < size) && (state < 256)) {
      state = (state << 8) + bitstream[j++];
    }

    printByte(symbol);
    if ((i % 14) == 0) {
      Serial.println();
    }
    
    if ((i % (14*14)) == 0) {
      delay(5000);
      Serial.println("============================");
    }
    
    i += 1;
  }
}

void setup() {
  // put your setup code here, to run once:
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.begin(9600);
  delay(1000);
}

void loop() {
  // put your main code here, to run repeatedly:
  digitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)
  delay(200);                      // wait for a second
  digitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW
  delay(800);                      // wait for a second
  //printMNIST(data);
  printZip(data_zip, data_zip_dist, DATA_ZIP_SIZE);
  delay(10000);
}
